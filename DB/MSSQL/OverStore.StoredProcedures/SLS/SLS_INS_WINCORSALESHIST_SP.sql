CREATE PROCEDURE [dbo].[SLS_INS_WINCORSALESHIST_SP] AS
BEGIN
	DECLARE @LastDate DATE 
	SELECT @LastDate = LAST_DT FROM ACC_MONTHCLOSE 

	DECLARE @StoreId INT, @Date DATE
	DECLARE db_cursor CURSOR FOR 
	SELECT ST.STOREID, CAST(DT.DATE_DT AS DATE) DATE_DT
	  FROM STR_STORE_VW ST
	  JOIN RPT_DATE DT ON DT.DATE_DT BETWEEN DATEADD(DAY, 1, @LastDate) AND CAST(GETDATE()-1 AS DATE)
	  JOIN STR_CASHREGISTER CR ON ST.STOREID = CR.STORE
	  LEFT JOIN (SELECT STORE, TRANSACTION_DT, CASHREGISTER,
						SUM(CASE WHEN TRANSACTIONTYPE != 5 THEN TOTAL_AMT ELSE 0 END) RECEIPT_AMT,
						-1*SUM(CASE WHEN TRANSACTIONTYPE = 5 THEN TOTAL_AMT ELSE 0 END) REFUND_AMT
				   FROM SLS_SALE S (NOLOCK)
				   JOIN STR_STORE_VW SS ON S.STORE = SS.STOREID AND SS.TERMINAL = 'Wincor'
				  WHERE CANCELLED_FL = 'N'
				    AND TRANSACTION_DT > @LastDate
				  GROUP BY STORE, TRANSACTION_DT, CASHREGISTER) SALE ON ST.STOREID = SALE.STORE AND DT.DATE_DT = SALE.TRANSACTION_DT AND CR.CASHREGISTERID = SALE.CASHREGISTER
	  LEFT JOIN (SELECT STORE, TRANSACTION_DT, CASHREGISTER,
						SUM(RECEIPTTOTAL_AMT + SLPTOTAL_AMT) ZETRECEIPT_AMT,
						SUM(REFUND_AMT) ZETREFUND_AMT
				   FROM SLS_ZET_VW  
				  WHERE TRANSACTION_DT > @LastDate
				  GROUP BY STORE, TRANSACTION_DT, CASHREGISTER) ZET ON ST.STOREID = ZET.STORE AND DT.DATE_DT = ZET.TRANSACTION_DT AND CR.CASHREGISTERID = ZET.CASHREGISTER
	 WHERE ST.OPENING_DT <= DT.DATE_DT 
	   AND ST.TERMINAL = 'Wincor'
	   AND COALESCE(ZETRECEIPT_AMT, 0) != 0
	   AND (ISNULL(RECEIPT_AMT,0) - ISNULL(REFUND_AMT,0) - ISNULL(ZETRECEIPT_AMT,0) + ISNULL(ZETREFUND_AMT,0) != 0);


	-- run unbalanced days
	OPEN db_cursor  
	FETCH NEXT FROM db_cursor INTO @StoreId, @Date  

	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		  EXEC SLS_INS_WINCORSALESDATE_SP @Date, @StoreId;

		  FETCH NEXT FROM db_cursor INTO @StoreId, @Date  
	END 

	CLOSE db_cursor  
	DEALLOCATE db_cursor 
END;