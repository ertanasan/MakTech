CREATE PROCEDURE SLS_LST_CATEGORYSTORE_SP @CategoryName VARCHAR(100), @ProductId INT = -1, @EndDate DATETIME, @DayGroup INT = 1 WITH RECOMPILE AS
BEGIN
  IF OBJECT_ID('tempdb..#stores') IS NOT NULL DROP TABLE #stores
  IF OBJECT_ID('tempdb..#storesales') IS NOT NULL DROP TABLE #storesales

  DECLARE @currentDate DATE = dbo.STR_GETUSERCURRENTDATE_FN(); -- CAST(GETDATE() AS DATE)

  IF @EndDate IS NULL OR @EndDate > @currentDate SET @EndDate = @currentDate
  DECLARE @today DATE = cast(@EndDate as DATE);      
  DECLARE @startday DATE, @endday DATE

  SELECT @startday = CASE @DayGroup WHEN 1 THEN @EndDate WHEN 2 THEN @EndDate-1 WHEN 3 THEN @EndDate-7 WHEN 4 THEN @EndDate-30 END, 
		 @endday = CASE @DayGroup WHEN 1 THEN @EndDate ELSE @EndDate-1 END;

  SELECT STOREID INTO #stores FROM dbo.STR_GETUSERSTORES_FN()

  SELECT S.STORE, SUM(PRICE) SALE, SUM(S.QUANTITY_QTY*1.0/(CASE WHEN P.UNIT = 1 THEN 1000.0 ELSE 1 END)) QUANTITY,  
  	     COUNT(DISTINCT S.SALE) CUSTOMERS, COUNT(*)*1.0/COUNT(DISTINCT S.SALE) AVGUNITPERCUSTOMER, 
  	     SUM(PRICE)/COUNT(DISTINCT S.SALE) AVGTRANSACTIONVALUE, 
  	     SUM(S.QUANTITY_QTY*1.0/(CASE WHEN P.UNIT = 1 THEN 1000.0 ELSE 1 END))/COUNT(DISTINCT S.SALE) AVGQUANTITYPERCUSTOMER,
		 COUNT(*) TOTALUNIT  
	INTO #storesales
    FROM PRD_PRODUCT_VW P
    JOIN SLS_SALEDETAIL S (NOLOCK) ON P.PRODUCTID = S.PRODUCT
	JOIN #stores ST ON S.STORE = ST.STOREID
   WHERE (@CategoryName = 'All' OR CATEGORY_NM = @CategoryName)
     AND (@ProductId = -1 OR P.PRODUCTID = @ProductId)
     AND S.TRANSACTION_DT BETWEEN @startday and @endday
     AND S.CANCEL_FL = 'N'
   GROUP BY S.STORE;

  SELECT *, SALE/TOTSALE SALE_PCT, CUMSALE/TOTSALE CUMSALE_PCT, ST.STORE_NM
    FROM (SELECT *, SUM(SALE) OVER (ORDER BY SALE DESC ROWS UNBOUNDED PRECEDING) CUMSALE, SUM(SALE) OVER () TOTSALE
		    FROM #storesales) A
    JOIN STR_STORE ST (NOLOCK) ON A.STORE = ST.STOREID
   ORDER BY SALE DESC
END