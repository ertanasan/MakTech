CREATE PROCEDURE WHS_LST_ORDERSALEDATEDET_SP 
	@ProductId INT = -1,
	@StoreId INT = -1,
	@StartDate DATE,
	@EndDate DATE AS
BEGIN

	WITH PRICE AS (
	SELECT PRODUCT, PRICE_AMT
	  FROM PRC_PRODUCT
	 WHERE PACKAGE = 1),
	ORDERS AS (
	SELECT CAST(ORDER_DT AS DATE) ORDER_DT
		 , SUM(OD.SHIPPED_QTY*OD.ORDERUNIT_QTY*ISNULL(P.UNITPRICE_AMT,0)) ORDER_AMT
	  FROM WHS_STOREORDER O
	  JOIN WHS_STOREORDERDETAIL OD ON O.STOREORDERID = OD.STOREORDER
	  JOIN PRD_PRODUCT_VW P ON OD.PRODUCT = P.PRODUCTID
	  -- LEFT JOIN PRD_PRODUCT_VW P2 ON P.PARENT = P2.PRODUCTID
	  -- LEFT JOIN PRICE PR ON COALESCE(P2.PRODUCTID, P.PRODUCTID) = PR.PRODUCT
	 WHERE CAST(ORDER_DT AS DATE) BETWEEN @StartDate AND @EndDate
	   AND (@ProductId = -1 OR COALESCE(P2.PRODUCTID, P.PRODUCTID) = @ProductId)
	   AND (@StoreId = -1 OR O.STORE = @StoreId)
	   AND O.STATUS >= 4
	 GROUP BY CAST(ORDER_DT AS DATE)), 
	SALES AS (
	SELECT TRANSACTION_DT, SUM(PRICE) SALE_AMT
	  FROM SLS_STOREDAILYPRODUCT_SYN
	  JOIN PRD_PRODUCT_VW P ON PRODUCT = P.PRODUCTID
	  LEFT JOIN PRD_PRODUCT_VW P2 ON P.PARENT = P2.PRODUCTID
	 WHERE TRANSACTION_DT BETWEEN @StartDate AND @EndDate
	   AND (@ProductId = -1 OR COALESCE(P2.PRODUCTID, P.PRODUCTID) = @ProductId)
	   AND (@StoreId = -1 OR STORE = @StoreId)
	 GROUP BY TRANSACTION_DT) 
	SELECT COALESCE(A.ORDER_DT, B.TRANSACTION_DT) DATE_DT
		 , A.ORDER_AMT, B.SALE_AMT
		 , SUM(ISNULL(A.ORDER_AMT,0) - ISNULL(B.SALE_AMT,0)) OVER (ORDER BY COALESCE(A.ORDER_DT, B.TRANSACTION_DT) ROWS UNBOUNDED PRECEDING) BALANCE_AMT
	  FROM ORDERS A
	  FULL OUTER JOIN SALES B ON A.ORDER_DT = B.TRANSACTION_DT
	 ORDER BY 1;

END