CREATE PROCEDURE SLS_UPD_PAYMENTUNBALANCED_SP AS
BEGIN
  DECLARE @StartDate DATE = CAST(GETDATE()-60 AS DATE)
  DECLARE @EndDate DATE = CAST(GETDATE()-1 AS DATE)
  
  IF OBJECT_ID('tempdb.dbo.#tmp', 'U') IS NOT NULL DROP TABLE #tmp;  

  SELECT S.STORE, S.SALEID, S.TRANSACTION_DT, S.TRANSACTION_TXT, S.TOTAL_AMT, ISNULL(SUM(SP.PAID_AMT-SP.REFUND_AMT+SP.CARD_AMT),0) PAYMENT_AMT, SP.SALE
    INTO #tmp
    FROM SLS_SALE S (NOLOCK)
    LEFT JOIN SLS_SALEPAYMENT SP (NOLOCK) ON S.SALEID = SP.SALE 
   WHERE S.TRANSACTION_DT BETWEEN @StartDate AND @EndDate
     AND S.CANCELLED_FL = 'N'
   GROUP BY S.STORE, S.SALEID, S.TRANSACTION_DT, S.TRANSACTION_TXT, S.TOTAL_AMT, SP.SALE
  HAVING S.TOTAL_AMT != ISNULL(SUM(SP.PAID_AMT-SP.REFUND_AMT+SP.CARD_AMT),0) 

  INSERT INTO SLS_SALEPAYMENT
  ( EVENT, ORGANIZATION, DELETED_FL, CREATE_DT, CREATEUSER, CREATECHANNEL, CREATEBRANCH, CREATESCREEN, SALE
  , TRANSACTION_TXT, TRANSACTION_DT, STORE, PAYMENTTYPE_TXT, PAID_AMT, REFUND_AMT, POSBANKTYPE, POSTRXTYPE, ACCNO_TXT, DEBITCARD_FL, CARD_AMT)
  SELECT 1045, 1, 'N', GETDATE(), 1, 1, 1, 1, SALEID, TRANSACTION_TXT, TRANSACTION_DT, STORE, '00', TOTAL_AMT, 0, 0, 0, '', 'N', 0
    FROM #tmp
   WHERE SALE IS NULL

  UPDATE A 
     SET A.CARD_AMT = CASE WHEN A.CARD_AMT > 0 THEN B.TOTAL_AMT ELSE 0 END
       , A.PAID_AMT = CASE WHEN A.CARD_AMT > 0 THEN 0 ELSE B.TOTAL_AMT END
  	 , A.REFUND_AMT = 0
  -- SELECT *
    FROM SLS_SALEPAYMENT A
    JOIN #tmp B ON A.SALE = B.SALE
END