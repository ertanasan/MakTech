CREATE PROCEDURE WHS_LST_STOCKTAKING_SP @StockTakingSchedule INT AS
BEGIN                
                
  -- DECLARE @StockTakingSchedule INT = 68782
  IF OBJECT_ID('tempdb..#stores') IS NOT NULL DROP TABLE #stores
  IF OBJECT_ID('tempdb..#products') IS NOT NULL DROP TABLE #products
  IF OBJECT_ID('tempdb..#stock') IS NOT NULL DROP TABLE #stock
  IF OBJECT_ID('tempdb..#stockred') IS NOT NULL DROP TABLE #stockred
  IF OBJECT_ID('tempdb..#GATHERED') IS NOT NULL DROP TABLE #GATHERED
  IF OBJECT_ID('tempdb..#CURRENTSTOCK') IS NOT NULL DROP TABLE #CURRENTSTOCK

  CREATE TABLE #stock (PRODUCT INT, STOCKGROUP_NM VARCHAR(100), STOCK NUMERIC(12,3), NEWCOUNTING NUMERIC(12,3))

  DECLARE @newCounting INT
  DECLARE @Store INT 
  SELECT @Store = STORE, @newCounting = COUNT(*) 
    FROM WHS_STOCKTAKINGSCHEDULE 
   WHERE STOCKTAKINGSCHEDULEID = @StockTakingSchedule
     -- AND PLANNED_DT = CAST(GETDATE() - 0.25 AS DATE)
   GROUP BY STORE

  SELECT P.PRODUCTID, SUM(SOD.SHIPPED_QTY * SOD.ORDERUNIT_QTY) GATHERED
    INTO #GATHERED
    FROM WHS_STOREORDER SO
    JOIN WHS_STOREORDERDETAIL SOD ON SO.STOREORDERID = SOD.STOREORDER AND SOD.DELETED_FL = 'N'
    JOIN PRD_PRODUCT P ON SOD.PRODUCT = P.PRODUCTID
    LEFT JOIN (SELECT DISTINCT sth_evrakno_sira, sth_tarih FROM MIK_TRANSACTION20_SYN WHERE sth_evrakno_seri = 'OMS' and sth_tarih > CAST(GETDATE() AS DATE)) MIK ON SO.STOREORDERID = MIK.sth_evrakno_sira
   WHERE COALESCE(MIK.sth_tarih, SO.SHIPMENT_DT) > CAST(GETDATE() AS DATE)
     AND SO.DELETED_FL = 'N'
     AND SO.STATUS IN (3, 4)
     AND SOD.SHIPPED_QTY > 0
     AND @Store = 999
   GROUP BY P.PRODUCTID, P.CODE_NM
  
  SELECT P.PRODUCTID, P.CODE_NM, P.NAME_NM, 
  	     SUM(CASE WHEN WS.WAREHOUSE = 1001 THEN STOCK ELSE 0 END) MAINWH,
  	     SUM(CASE WHEN WS.WAREHOUSE = 1003 THEN STOCK ELSE 0 END) PRODUCTIONWH,
  	     SUM(CASE WHEN WS.WAREHOUSE = 1004 THEN STOCK ELSE 0 END) REFUNDWH,
  	     ISNULL(GATHERED, 0) GATHERED
	INTO #CURRENTSTOCK
    FROM INV_WAREHOUSESTOCK_VW WS
    JOIN PRD_PRODUCT P ON WS.PRODUCT = P.PRODUCTID
    LEFT JOIN #GATHERED G ON P.PRODUCTID = G.PRODUCTID
   WHERE CAST(GETDATE() AS DATE) BETWEEN START_DT AND END_DT
     AND WS.WAREHOUSE IN (1001, 1003, 1004)
     AND @Store = 999
   GROUP BY P.PRODUCTID, P.CODE_NM, P.NAME_NM, GATHERED

  IF @newCounting = 0 
  BEGIN
	INSERT INTO #stock 
	SELECT * 
	  FROM (
	SELECT COALESCE(10000 + SG.STOCKGROUP, CS.PRODUCT) PRODUCT, 
		   COALESCE(SG.STOCKGROUP_NM, CS.STOCKGROUP_NM) STOCKGROUP_NM, 
		   SUM(STOCK) STOCK, SUM(NEWCOUNTING) NEWCOUNTING
	  FROM WHS_STOCKTAKINGSCHEDULE S
	  JOIN WHS_COUNTINGSTOCK CS ON S.ACTUAL_DT = CS.DATE_DT AND S.STORE = CS.STORE
	  LEFT JOIN PRD_PRODUCT P ON CS.PRODUCT = P.PRODUCTID
	  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID
	 WHERE STOCKTAKINGSCHEDULEID = @StockTakingSchedule 
	   AND (CS.PRODUCT > 10000 OR P.SUPERGROUP1 != 9)
	   AND S.COUNTINGTYPE = 1
	 GROUP BY COALESCE(10000 + SG.STOCKGROUP, CS.PRODUCT), COALESCE(SG.STOCKGROUP_NM, CS.STOCKGROUP_NM)) A
  END
  ELSE 
  BEGIN
	WITH COUNTING AS (
	SELECT COALESCE(10000 + SG.STOCKGROUP, ST.PRODUCT) PRODUCT, 
		   COALESCE(SG.STOCKGROUP_NM, P.NAME_NM) STOCKGROUP_NM, SUM(ST.COUNTINGVALUE_AMT) COUNTINGVALUE
	  FROM WHS_STOCKTAKINGSCHEDULE S
	  JOIN WHS_STOCKTAKING ST ON S.STOCKTAKINGSCHEDULEID = ST.STOCKTAKINGSCHEDULE
	  JOIN PRD_PRODUCT P ON ST.PRODUCT = P.PRODUCTID
	  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID
	 WHERE STOCKTAKINGSCHEDULEID = @StockTakingSchedule 
	   AND P.SUPERGROUP1 != 9
	   AND S.COUNTINGTYPE = 1
	 GROUP BY COALESCE(10000 + SG.STOCKGROUP, ST.PRODUCT), COALESCE(SG.STOCKGROUP_NM, P.NAME_NM) ),
	STOCKTABLE AS (
	SELECT COALESCE(10000 + SG.STOCKGROUP, CS.PRODUCT) PRODUCT, 
		   COALESCE(SG.STOCKGROUP_NM, CS.STOCKGROUP_NM) STOCKGROUP_NM, 
		   SUM(STOCK) STOCK
	  FROM WHS_STOCKTAKINGSCHEDULE S
	  JOIN INV_CURRENTSTOCK CS ON S.STORE = CS.STORE
	  LEFT JOIN PRD_PRODUCT P ON CS.PRODUCT = P.PRODUCTID
	  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID
	 WHERE STOCKTAKINGSCHEDULEID = @StockTakingSchedule 
	   AND (CS.PRODUCT > 10000 OR P.SUPERGROUP1 != 9)
	 GROUP BY COALESCE(10000 + SG.STOCKGROUP, CS.PRODUCT), COALESCE(SG.STOCKGROUP_NM, CS.STOCKGROUP_NM))
    INSERT INTO #stock
	SELECT PRODUCT, STOCKGROUP_NM, SUM(STOCK) STOCK, SUM(NEWCOUNTING) NEWCOUNTING
	  FROM (
	SELECT PRODUCT, STOCKGROUP_NM, 0 STOCK, COUNTINGVALUE NEWCOUNTING FROM COUNTING
	 UNION ALL
	SELECT PRODUCT, STOCKGROUP_NM, STOCK, 0 NEWCOUNTING FROM STOCKTABLE) A
	GROUP BY PRODUCT, STOCKGROUP_NM	
  END

  select STOREID into #stores from dbo.STR_GETUSERSTORESWHINC_FN();

  SELECT DISTINCT COALESCE(SG.PRODUCTID, S.PRODUCT) PRODUCT
    INTO #stockred
    FROM #stock S
	LEFT JOIN PRD_STOCKGROUP_VW SG ON S.PRODUCT = 10000 + SG.STOCKGROUP
   WHERE ((STOCK - NEWCOUNTING ) / CASE WHEN ABS(STOCK) = 0 THEN 0.01 ELSE ABS(STOCK) END) > 0.5
     AND ABS(STOCK) > 1

  SELECT P.PRODUCTID, P.CODE_NM, B.SCALECODE_NM, P.NAME_NM, C.CATEGORY_NM,
		 CASE P.UNIT WHEN 1 THEN 'Kg' ELSE 'Adet' END UNIT_NM, ISNULL(PR2.PRICE_AMT, PR.PRICE_AMT) PRICE_AMT
    INTO #products
    FROM PRD_PRODUCT P
    LEFT JOIN (SELECT PRODUCT, MAX(SUBSTRING(BARCODE_TXT,4,10)) SCALECODE_NM
				 FROM PRD_BARCODE WHERE BARCODE_TXT LIKE '290%' AND BARCODETYPE = 1
				GROUP BY PRODUCT) B ON P.PRODUCTID = B.PRODUCT
    LEFT JOIN PRD_SUBGROUP SG ON P.SUBGROUP = SG.SUBGROUPID
    LEFT JOIN PRD_CATEGORY C ON SG.CATEGORY = C.CATEGORYID
	LEFT JOIN (SELECT PRODUCT, PRICE_AMT FROM PRC_PRODUCT WHERE PACKAGE = 1 AND DELETED_FL = 'N') PR ON P.PRODUCTID = PR.PRODUCT
	LEFT JOIN (SELECT PRODUCT, PRICE_AMT FROM PRC_PRODUCT WHERE PACKAGE = 1 AND DELETED_FL = 'N') PR2 ON P.PARENT = PR2.PRODUCT
   WHERE (@Store = 999 OR P.SUPERGROUP3 NOT IN (3))
     AND P.DELETED_FL = 'N'
     AND P.ACTIVE_FL = 'Y'
	 AND P.PRODUCTID NOT IN (SELECT PRODUCT FROM PRD_PROPERTY WHERE PROPERTYTYPE = 6 AND VALUE_TXT = '1') -- KONSİNYE ÜRÜN

  SELECT S.STOCKTAKINGID
	   , S.EVENT
	   , S.ORGANIZATION
	   , S.DELETED_FL
	   , S.CREATE_DT
	   , S.UPDATE_DT
	   , S.CREATEUSER
	   , S.UPDATEUSER
	   , S.CREATECHANNEL
	   , S.CREATEBRANCH
	   , S.CREATESCREEN
	   , SS.STORE [STORE]
	   , S.COUNTING_DT
	   , P.PRODUCTID [PRODUCT]
	   , S.COUNTINGVALUE_AMT
	   , Z.ZONEID [ZONE]
	   , COALESCE(S.STOCKTAKINGSCHEDULE, @StockTakingSchedule)  [STOCKTAKINGSCHEDULE]
	   --, COALESCE(S.PRODUCT, P.PRODUCTID) PRODUCT
	   --, COALESCE(S.ORDERUNIT_QTY, P.PACKAGE_QTY) ORDERUNIT_QTY
	   , P.CODE_NM PRODUCTCODE_NM
	   , P.SCALECODE_NM    
	   , P.NAME_NM PRODUCT_NM
	   , P.CATEGORY_NM
	   , P.UNIT_NM
	   , P.PRICE_AMT UNITPRICE_AMT
	   , S.COUNTINGVALUE_AMT [INITIALCOUNTINGVALUE_AMT]
	   , CS.STOCK CURRENTSTOCK
	   , CASE WHEN SS.COUNTINGTYPE = 1 AND SR.PRODUCT IS NOT NULL THEN 'Y' ELSE 'N' END STOCKRED
	   , ISNULL(MAINWH,0) MAINWH, ISNULL(PRODUCTIONWH,0) PRODUCTIONWH, ISNULL(REFUNDWH,0) REFUNDWH, ISNULL(GATHERED,0) GATHERED
    FROM #products P
    JOIN WHS_ZONE Z ON 1=1
	JOIN WHS_STOCKTAKINGSCHEDULE SS ON  @StockTakingSchedule = SS.STOCKTAKINGSCHEDULEID AND SS.STORE IN (SELECT STOREID FROM #stores)
    LEFT JOIN WHS_STOCKTAKING S ON S.PRODUCT = P.PRODUCTID AND Z.ZONEID = S.ZONE AND S.STOCKTAKINGSCHEDULE = @StockTakingSchedule
	LEFT JOIN INV_CURRENTSTOCK CS ON SS.STORE = CS.STORE AND P.PRODUCTID = CS.PRODUCT
	LEFT JOIN #stockred SR ON S.PRODUCT = SR.PRODUCT
	LEFT JOIN #CURRENTSTOCK WHS ON P.PRODUCTID = WHS.PRODUCTID
   WHERE (SS.COUNTINGTYPE!=2 OR ( SS.COUNTINGTYPE=2 AND S.PRODUCT IS NOT NULL))
     AND ((SS.STORE = 999 AND ((SS.COUNTINGTYPE = 1 AND Z.LOCATION_TXT = 'WAREHOUSE_G') OR (SS.COUNTINGTYPE = 2 AND Z.LOCATION_TXT = 'WAREHOUSE_D' ))) OR (SS.STORE != 999 AND Z.LOCATION_TXT = 'STORE'))
   ORDER BY Z.ZONEID, P.NAME_NM
                    
END