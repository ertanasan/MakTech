CREATE FUNCTION [dbo].[INV_STOCKOUT_FN] (@StoreID INT, @DayCount INT) RETURNS TABLE AS
RETURN
WITH INITIALSTOCK AS (
SELECT COALESCE(10000+SG.STOCKGROUP, P.PRODUCTID) PRODUCTID,
       COALESCE(SG.STOCKGROUP_NM, P.NAME_NM) PRODUCT_NM, SUM(INV.STOCK) STOCK
  FROM dbo.INV_STOCKDATE_FN(CAST(GETDATE()-@DayCount AS DATE)) INV  
  JOIN STR_STORE ST ON INV.STORE = ST.STOREID  
  JOIN PRD_PRODUCT_VW P ON INV.PRODUCT = P.PRODUCTID  
  LEFT JOIN PRD_PROPERTY PP ON P.PRODUCTID = PP.PRODUCT AND PP.PROPERTYTYPE = 6
  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID AND SG.USAGETYPE_CD = 1
 WHERE P.CATEGORY_NM != 'Sarf Malzemeleri'
   AND ST.STOREID = @StoreID
   AND P.ACTIVE_FL = 'Y'
   AND PP.PRODUCT IS NULL
 GROUP BY COALESCE(10000+SG.STOCKGROUP, P.PRODUCTID), COALESCE(SG.STOCKGROUP_NM, P.NAME_NM)),
 
STOCKTRAN AS (
SELECT COALESCE(10000+SG.STOCKGROUP, P.PRODUCTID) PRODUCTID, COALESCE(SG.STOCKGROUP_NM, P.NAME_NM) PRODUCT_NM  
     , INV.TRANSACTION_DT, SUM(INV.QUANTITY_QTY) QUANTITY_QTY   
  FROM INV_STORETRANSACTIONS_VW INV  
  JOIN STR_STORE ST ON INV.STORE = ST.STOREID  
  JOIN PRD_PRODUCT_VW P ON INV.PRODUCT = P.PRODUCTID  
  LEFT JOIN PRD_PROPERTY PP ON P.PRODUCTID = PP.PRODUCT AND PP.PROPERTYTYPE = 6
  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID AND SG.USAGETYPE_CD = 1
 WHERE STORE = @StoreID
   AND INV.TRANSACTION_DT BETWEEN CAST (GETDATE()-@DayCount+1 AS DATE) AND CAST (GETDATE()-1 AS DATE)
   AND P.CATEGORY_NM != 'Sarf Malzemeleri'
   AND P.ACTIVE_FL = 'Y'
   AND PP.PRODUCT IS NULL
 GROUP BY COALESCE(10000+SG.STOCKGROUP, P.PRODUCTID), COALESCE(SG.STOCKGROUP_NM, P.NAME_NM)  
     , INV.TRANSACTION_DT), 

SALES AS (
SELECT COALESCE(SG.STOCKGROUP+10000, S.PRODUCT) PRODUCT, COALESCE(SG.STOCKGROUP_NM, P.NAME_NM) PRODUCT_NM, 
	   S.TRANSACTION_DT, SUM(S.QUANTITY) QUANTITY
  FROM SLS_STOREDAILYPRODUCT_SYN S
  JOIN PRD_PRODUCT_VW P ON S.PRODUCT = P.PRODUCTID
  LEFT JOIN PRD_PROPERTY PP ON P.PRODUCTID = PP.PRODUCT AND PP.PROPERTYTYPE = 6
  LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID AND SG.USAGETYPE_CD = 1
 WHERE STORE = @StoreID
   AND P.CATEGORY_NM != 'Sarf Malzemeleri'
   AND PP.PRODUCT IS NULL
   AND P.ACTIVE_FL = 'Y'
   AND S.TRANSACTION_DT BETWEEN CAST (GETDATE()-@DayCount AS DATE) AND CAST (GETDATE()-1 AS DATE)
 GROUP BY COALESCE(SG.STOCKGROUP+10000, S.PRODUCT), COALESCE(SG.STOCKGROUP_NM, P.NAME_NM), S.TRANSACTION_DT), 

DAILYSTOCK AS (
SELECT PRODUCTID, PRODUCT_NM, TRANSACTION_DT, SUM(ISNULL(STOCK,0)) OVER (PARTITION BY PRODUCTID ORDER BY TRANSACTION_DT ROWS UNBOUNDED PRECEDING) DAYSTOCK
  FROM (
SELECT ST.PRODUCTID, ST.PRODUCT_NM, CAST(GETDATE()-@DayCount AS DATE) TRANSACTION_DT, STOCK
  FROM INITIALSTOCK ST
 UNION ALL
SELECT ST.PRODUCTID, ST.PRODUCT_NM, DT.DATE_DT, ISNULL(T.QUANTITY_QTY,0) QUANTITY_QTY
  FROM (SELECT DISTINCT PRODUCTID, PRODUCT_NM FROM INITIALSTOCK) ST
  JOIN RPT_DATE DT ON DT.DATE_DT BETWEEN CAST(GETDATE()-@DayCount AS DATE) AND CAST(GETDATE()-1 AS DATE)
  LEFT JOIN STOCKTRAN T ON ST.PRODUCTID = T.PRODUCTID AND DT.DATE_DT = T.TRANSACTION_DT) A ) 

SELECT *
  FROM (
SELECT *, SUM(SALE) OVER(PARTITION BY PRODUCTID) / (@DayCount*1.0) AVGSALE, MAX(SALE) OVER(PARTITION BY PRODUCTID) MAXSALE
  FROM (
SELECT PRODUCTID, PRODUCT_NM, TRANSACTION_DT, SUM(DAYSTOCK) DAYSTOCK, SUM(SALE) SALE 
  FROM (
SELECT *, 0 SALE
  FROM DAILYSTOCK DS 
 UNION ALL
SELECT PRODUCT, PRODUCT_NM, TRANSACTION_DT, 0 DAYSTOCK, QUANTITY SALE
  FROM SALES) A
 GROUP BY PRODUCTID, PRODUCT_NM, TRANSACTION_DT) B ) C
 WHERE DAYSTOCK < AVGSALE
   AND SALE < (AVGSALE/2)