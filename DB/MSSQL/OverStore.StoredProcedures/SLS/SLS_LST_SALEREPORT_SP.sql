CREATE PROCEDURE [dbo].[SLS_LST_SALEREPORT_SP]
    @Store INT = NULL,
	@StartDate DATE = NULL,
	@EndDate DATE = NULL
AS
BEGIN
    /*Section="Organization"*/
    -- Get the caller organization from session context
    DECLARE @Organization INT;
    SELECT @Organization = dbo.SYS_GETCURRENTORGANIZATION_FN();
    IF dbo.SYS_ISSYSTEMORGANIZATION_FN() = 1
    BEGIN
      -- Current organization is system. This is a batch or system process.
      SET @Organization = null;
    END

	/* Section="Parameter Modification"*/
	IF @StartDate IS NULL 
	BEGIN
		Set @StartDate = GETDATE()
		Set @EndDate = GETDATE()
	END
	ELSE IF @EndDate IS NULL
		Set @EndDate = @StartDate
	--Set @StartDate = cast(@StartDate AS DATE)
	--Set @EndDate = cast(@EndDate AS DATE)

    /*Section="Query"*/
   SELECT	ROW_NUMBER() OVER(ORDER BY S.STORE) [ROW_NO]
		, S.STORE							[STORE_ID]
		, MAX(ST.STORE_NM)					[STORE_NAME]
		, COUNT(DISTINCT P.CODE_NM)			[PRODUCT_VARIATION]
		, COUNT(DISTINCT P.SUBGROUP)		[PRODUCT_FAMILY_VARIATION]
		, COUNT(DISTINCT CASE WHEN S.TRANSACTIONTYPE != 5 AND SD.CANCEL_FL = 'N' THEN SD.SALE END)	[SALE_QTY]
		, SUM(CASE WHEN S.TRANSACTIONTYPE != 5 AND SD.CANCEL_FL = 'N' THEN SD.PRICE ELSE 0 END)		[SALE]
		, COUNT(DISTINCT CASE WHEN S.TRANSACTIONTYPE = 5 AND SD.CANCEL_FL = 'N' THEN SD.SALE END)	[REFUND_QTY]
		, SUM(CASE WHEN S.TRANSACTIONTYPE = 5 AND SD.CANCEL_FL = 'N' THEN SD.PRICE ELSE 0 END)		[REFUND]
		, COUNT(DISTINCT CASE WHEN S.TRANSACTIONTYPE != 5 AND SP.CARD_AMT = 0 AND SD.CANCEL_FL = 'N' THEN SD.SALE END)			[CASH_QTY] 
		, SUM(CASE WHEN  S.TRANSACTIONTYPE != 5 AND SP.CARD_AMT = 0 AND SD.CANCEL_FL = 'N' THEN SD.PRICE ELSE 0 END)			[CASH] 
		, COUNT(DISTINCT CASE WHEN S.TRANSACTIONTYPE != 5 AND SP.CARD_AMT > 0 AND SD.CANCEL_FL = 'N' THEN SD.SALE END)			[CARD_QTY] 
		, SUM(CASE WHEN S.TRANSACTIONTYPE != 5 AND SP.CARD_AMT > 0 AND SD.CANCEL_FL = 'N' THEN SD.PRICE ELSE 0 END)			[CARD] 
		, COUNT(DISTINCT CASE WHEN SD.CANCEL_FL != 'N' THEN SD.SALE END)							[CANCELLED_QTY]
		, SUM(CASE WHEN SD.CANCEL_FL != 'N' THEN SD.PRICE ELSE 0 END)								[CANCELLED_TOTAL]
		, SUM(CASE WHEN SD.UNIT=0 THEN QUANTITY_QTY/1000.0 ELSE QUANTITY_QTY END)					[PRODUCT_QTY] 

  FROM SLS_SALE S (NOLOCK)
  JOIN SLS_SALEDETAIL (NOLOCK) SD		ON S.SALEID = SD.SALE
  JOIN SLS_SALEPAYMENT (NOLOCK) SP		ON S.SALEID = SP.SALE
  JOIN PRD_PRODUCT (NOLOCK) P			ON SD.PRODUCT = P.PRODUCTID
  LEFT JOIN STR_STORE (NOLOCK) ST		ON S.STORE = ST.STOREID
  --LEFT JOIN PRD_SUBGROUP (NOLOCK) PS	ON P.SUBGROUP  = PS.SUBGROUPID 
  WHERE (@Organization IS NULL OR S.ORGANIZATION = @Organization)
		AND S.TRANSACTION_DT >=  @StartDate 
		AND S.TRANSACTION_DT <= @EndDate
		AND st.STOREID = CASE WHEN @Store IS NOT NULL THEN @Store ELSE st.STOREID END
		AND S.DELETED_FL = 'N'
		AND SD.DELETED_FL = 'N'
		AND SP.DELETED_FL = 'N'
  GROUP BY S.STORE

    /*Section="End"*/
END;
