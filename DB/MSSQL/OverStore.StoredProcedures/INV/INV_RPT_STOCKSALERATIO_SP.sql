CREATE PROCEDURE INV_RPT_STOCKSALERATIO_SP AS
BEGIN

	IF OBJECT_ID('tempdb.dbo.#DAILYSTOCK', 'U') IS NOT NULL  DROP TABLE #DAILYSTOCK

	DECLARE @StartDate DATE = CAST(GETDATE() - 30 AS DATE) 
	DECLARE @EndDate DATE = CAST(GETDATE() AS DATE)
	 SELECT STORE, PRODUCT, TRANSACTION_DT START_DT,
			ISNULL(DATEADD(DAY,-1,LEAD(TRANSACTION_DT) OVER (PARTITION BY STORE, PRODUCT ORDER BY TRANSACTION_DT)),CONVERT(DATE,'20991231',112)) END_DT,
			SUM(STOCK) OVER (PARTITION BY STORE, PRODUCT ORDER BY TRANSACTION_DT ROWS UNBOUNDED PRECEDING) STOCK
	   INTO #DAILYSTOCK
	   FROM (
	 SELECT STORE, PRODUCT, @StartDate TRANSACTION_DT, STOCK
	   FROM INV_STOCKDATE_FN(@StartDate)   
	  UNION ALL
	 SELECT STORE, PRODUCT, CAST(INV.TRANSACTION_DT AS DATE), SUM(QUANTITY_QTY) QUANTITY
	   FROM INV_STORETRANSACTIONS_VW INV
	  WHERE INV.TRANSACTION_DT > @StartDate -- CAST('2019-03-01' AS DATE)
	  GROUP BY STORE, PRODUCT, INV.TRANSACTION_DT) A;

	SELECT STORE, STORE_NM
		 , AVGSTOCKPRICE, ROW_NUMBER() OVER (ORDER BY AVGSTOCKPRICE) STOCKRANK
		 , AVGSALE, ROW_NUMBER() OVER (ORDER BY AVGSALE DESC) SALERANK
		 , AVGSTOCKPRICE / AVGSALE RATIO, ROW_NUMBER() OVER (ORDER BY AVGSTOCKPRICE / AVGSALE) RATIORANK 
	  FROM (
	SELECT STORE, ST.STORE_NM, AVG(STOCKPRICE) AVGSTOCKPRICE, AVG(SALE) AVGSALE
	  FROM (
	 SELECT S.STORE, S.TRANSACTION_DT, S.SALE, 
			SUM(DS.STOCK * SP.PRICE_AMT) STOCKPRICE
	   FROM (SELECT STORE, TRANSACTION_DT, SUM(SALE_AMT) SALE
			   FROM SLS_SALESUMMARYHOUR_SYN
			  WHERE TRANSACTION_DT BETWEEN @StartDate AND @EndDate
			  GROUP BY STORE, TRANSACTION_DT) S
	   JOIN #DAILYSTOCK DS ON S.STORE = DS.STORE AND S.TRANSACTION_DT BETWEEN DS.START_DT AND DS.END_DT
	   JOIN PRC_SALEPRICE_VW SP ON DS.PRODUCT = SP.PRODUCT
	  GROUP BY S.STORE, S.TRANSACTION_DT, S.SALE) A 
	  JOIN STR_STORE_VW ST ON A.STORE = ST.STOREID
	 GROUP BY STORE, ST.STORE_NM) B
	 ORDER BY RATIORANK	DESC

END