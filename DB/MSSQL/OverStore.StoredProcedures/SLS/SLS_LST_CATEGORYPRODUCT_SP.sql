CREATE PROCEDURE SLS_LST_CATEGORYPRODUCT_SP @CategoryName VARCHAR(100), @StoreId INT = -1, @EndDate DATETIME, @DayGroup INT = 1 WITH RECOMPILE AS  
BEGIN  
  IF OBJECT_ID('tempdb..#stores') IS NOT NULL DROP TABLE #stores
  IF OBJECT_ID('tempdb..#productsales') IS NOT NULL DROP TABLE #productsales  

  DECLARE @currentDate DATE = dbo.STR_GETUSERCURRENTDATE_FN(); -- CAST(GETDATE() AS DATE)

  IF @EndDate IS NULL OR @EndDate > @currentDate SET @EndDate = @currentDate

  DECLARE @today DATE = cast(@EndDate as DATE);        
  DECLARE @startday DATE, @endday DATE  
  
  SELECT @startday = CASE @DayGroup WHEN 1 THEN @EndDate WHEN 2 THEN @EndDate-1 WHEN 3 THEN @EndDate-7 WHEN 4 THEN @EndDate-30 END,   
   @endday = CASE @DayGroup WHEN 1 THEN @EndDate ELSE @EndDate-1 END;  
  
  SELECT STOREID INTO #stores FROM dbo.STR_GETUSERSTORES_FN()
  
  SELECT P.PRODUCTID, P.NAME_NM PRODUCTNAME, SUM(PRICE) SALE, COUNT(DISTINCT S.SALE) CUSTOMERS, SUM(PRICE)/COUNT(DISTINCT S.SALE) AVGTRANSACTIONVALUE,  
		 SUM(S.QUANTITY_QTY*1.0/(CASE WHEN P.UNIT = 1 THEN 1000.0 ELSE 1 END)) QUANTITY,  
		 SUM(S.QUANTITY_QTY*1.0/(CASE WHEN P.UNIT = 1 THEN 1000.0 ELSE 1 END))/COUNT(DISTINCT S.SALE) AVGQUANTITYPERCUSTOMER  
    INTO #productsales  
    FROM PRD_PRODUCT_VW P  
    JOIN SLS_SALEDETAIL S (NOLOCK) ON P.PRODUCTID = S.PRODUCT  
	JOIN #stores ST ON S.STORE = ST.STOREID
   WHERE (@CategoryName = 'All' OR CATEGORY_NM = @CategoryName)
     AND (@StoreId = -1 OR S.STORE = @StoreId)  
     AND S.TRANSACTION_DT BETWEEN @startday and @endday  
     AND S.CANCEL_FL = 'N'  
   GROUP BY P.PRODUCTID, P.NAME_NM  
  
  SELECT *, SALE/TOTSALE SALE_PCT, CUMSALE/TOTSALE CUMSALE_PCT  
    FROM (SELECT *, SUM(SALE) OVER (ORDER BY SALE DESC ROWS UNBOUNDED PRECEDING) CUMSALE, SUM(SALE) OVER () TOTSALE  
		    FROM #productsales) A  
   ORDER BY SALE DESC  
END