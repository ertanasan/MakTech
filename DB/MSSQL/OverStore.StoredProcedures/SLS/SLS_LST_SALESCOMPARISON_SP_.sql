CREATE PROCEDURE [dbo].[SLS_LST_SALESCOMPARISON_SP]  
 @StoreId INT = -1,  
 @StartDate DATE = NULL,  
 @EndDate DATE = NULL,  
 @ComparingStartDate DATE = NULL,  
 @ComparingEndDate DATE = NULL  
AS  
BEGIN  
  
  -- Section:  Dropping TempTables                  
  IF OBJECT_ID('tempdb.dbo.#MAINSTORES', 'U') IS NOT NULL DROP TABLE #MAINSTORES;  
  IF OBJECT_ID('tempdb.dbo.#MAINDATA', 'U') IS NOT NULL DROP TABLE #MAINDATA;  
  IF OBJECT_ID('tempdb.dbo.#COMPARINGDATA', 'U') IS NOT NULL DROP TABLE #COMPARINGDATA;  
  IF OBJECT_ID('tempdb.dbo.#MAINDATAALLSTORES', 'U') IS NOT NULL DROP TABLE #MAINDATAALLSTORES;  
  IF OBJECT_ID('tempdb.dbo.#COMPARINGDATAALLSTORES', 'U') IS NOT NULL DROP TABLE #COMPARINGDATAALLSTORES;  
                 
  -- Section: Creating Temp Tables                  
  --SELECT STOREID, STORE_NM INTO #MAINSTORES FROM STR_STORE WHERE @StoreId IS NULL OR @StoreId  <= 0 OR STOREID = @StoreId  
  SELECT STOREID, STORE_NM, RM.MANAGER_NM REGIONMANAGER_NM  
    INTO #MAINSTORES   
    FROM dbo.STR_GETUSERSTORESALL_FN() ST  
	LEFT JOIN STR_REGIONMANAGERS RM ON ST.REGIONMANAGER = RM.REGIONMANAGERSID  
   WHERE (ISNULL(@StoreId, -1) = -1 OR STOREID = @StoreId);  
                  
  WITH SALES AS (  
  SELECT STORE [STOREID], TRANSACTION_DT   
	   , SUM(SALE_AMT + REFUND_AMT) [SALE]  
	   , SUM(SALE_QTY) [SALE_QTY]  
	   , SUM(CASH_AMT) [CASH]  
	   , SUM(CASH_QTY) [CASH_QTY]  
	   , SUM(CARD_AMT) [CARD]  
	   , SUM(CARD_QTY) [CARD_QTY]  
	   , SUM(REFUND_AMT) [REFUND]  
	   , SUM(REFUND_QTY) [REFUND_QTY]  
	   , SUM(CANCELLED_AMT) [CANCELLED_TOTAL]  
	   , SUM(CANCELLED_QTY) [CANCELLED_QTY]  
	   , SUM(PRODUCT_CNT) [PRODUCT_CNT]  
    FROM SLS_SALESUMMARYHOUR_SYN  
   WHERE TRANSACTION_DT BETWEEN @StartDate AND @EndDate    
     AND (ISNULL(@StoreId, -1) = -1 OR STORE = @StoreId)  
   GROUP BY STORE, TRANSACTION_DT)  
  SELECT S.STOREID, SUM(S.SALE) SALE, SUM(S.SALE_QTY) SALE_QTY   
       , SUM(CASE WHEN ISNULL(R.CARD_AMT,0) > 0 THEN S.SALE - R.CARD_AMT ELSE S.[CASH] END) [CASH]  
       , SUM(CASH_QTY) CASH_QTY  
       , SUM(CASE WHEN ISNULL(R.CARD_AMT,0) > 0 THEN R.CARD_AMT ELSE S.[CARD] END) [CARD]  
       , SUM(CARD_QTY) [CARD_QTY]  
       , SUM(S.REFUND) [REFUND]  
       , SUM(REFUND_QTY) [REFUND_QTY]  
       , SUM(S.CANCELLED_TOTAL) [CANCELLED_TOTAL]  
       , SUM(CANCELLED_QTY) [CANCELLED_QTY]  
       , SUM(PRODUCT_CNT) [PRODUCT_CNT]  
       , COUNT(DISTINCT TRANSACTION_DT) [DAY_CNT]  
    INTO #MAINDATAALLSTORES                  
    FROM SALES S  
    LEFT JOIN RCL_STORE R ON S.STOREID = R.STORE AND S.TRANSACTION_DT = R.RECONCILIATION_DT  
   GROUP BY S.STOREID;  
  
  
 WITH SALES AS (  
    SELECT STORE [STOREID], TRANSACTION_DT   
         , SUM(SALE_AMT + REFUND_AMT) [SALE]  
         , SUM(SALE_QTY) [SALE_QTY]  
         , SUM(CASH_AMT) [CASH]  
         , SUM(CASH_QTY) [CASH_QTY]  
         , SUM(CARD_AMT) [CARD]  
         , SUM(CARD_QTY) [CARD_QTY]  
         , SUM(REFUND_AMT) [REFUND]  
         , SUM(REFUND_QTY) [REFUND_QTY]  
         , SUM(CANCELLED_AMT) [CANCELLED_TOTAL]  
         , SUM(CANCELLED_QTY) [CANCELLED_QTY]  
         , SUM(PRODUCT_CNT) [PRODUCT_CNT]  
      FROM SLS_SALESUMMARYHOUR_SYN  
     WHERE TRANSACTION_DT BETWEEN @ComparingStartDate AND @ComparingEndDate  
       AND (ISNULL(@StoreId, -1) = -1 OR STORE = @StoreId)  
     GROUP BY STORE, TRANSACTION_DT)  
 SELECT S.STOREID, SUM(S.SALE) SALE, SUM(S.SALE_QTY) SALE_QTY   
      , SUM(CASE WHEN ISNULL(R.CARD_AMT,0) > 0 THEN S.SALE - R.CARD_AMT ELSE S.[CASH] END) [CASH]  
      , SUM(CASH_QTY) CASH_QTY  
      , SUM(CASE WHEN ISNULL(R.CARD_AMT,0) > 0 THEN R.CARD_AMT ELSE S.[CARD] END) [CARD]  
      , SUM(CARD_QTY) [CARD_QTY]  
      , SUM(S.REFUND) [REFUND]  
      , SUM(REFUND_QTY) [REFUND_QTY]  
      , SUM(S.CANCELLED_TOTAL) [CANCELLED_TOTAL]  
      , SUM(CANCELLED_QTY) [CANCELLED_QTY]  
      , SUM(PRODUCT_CNT) [PRODUCT_CNT]  
      , COUNT(DISTINCT TRANSACTION_DT) [DAY_CNT]  
   INTO #COMPARINGDATAALLSTORES                  
   FROM SALES S  
   LEFT JOIN RCL_STORE R ON S.STOREID = R.STORE AND S.TRANSACTION_DT = R.RECONCILIATION_DT  
  GROUP BY S.STOREID  
  
 --Section: Main Query                  
 SELECT ST.STOREID  
      , ST.STORE_NM  
      , ST.REGIONMANAGER_NM  
      , CASE WHEN C.SALE >= 10 THEN (M.SALE*100.0/C.SALE)-100 ELSE NULL END GROWTH_PCT  
      , M.SALE_QTY  
      , M.SALE  
      , CASE WHEN M.SALE_QTY > 0 THEN ROUND(M.SALE * 1.0 / M.SALE_QTY,2) ELSE 0 END ATV  
      , M.REFUND_QTY  
      , M.REFUND  
      , M.CASH_QTY  
      , M.CASH  
      , M.CARD_QTY  
      , M.CARD  
      , M.CANCELLED_QTY  
      , M.CANCELLED_TOTAL  
      , M.PRODUCT_CNT  
      , M.DAY_CNT  
      , CASE WHEN M.SALE_QTY > 0 THEN ROUND(M.PRODUCT_CNT * 1.0 / M.SALE_QTY, 2) ELSE 0 END UPT  
      , C.STOREID compSTOREID  
      , C.SALE_QTY compSALE_QTY  
      , C.SALE compSALE  
      , CASE WHEN C.SALE_QTY > 0 THEN ROUND(C.SALE * 1.0 / C.SALE_QTY,2) ELSE 0 END compATV  
      , C.REFUND_QTY compREFUND_QTY  
      , C.REFUND compREFUND  
      , C.CASH_QTY compCASH_QTY  
      , C.CASH compCASH  
      , C.CARD_QTY compCARD_QTY  
      , C.CARD compCARD  
      , C.CANCELLED_QTY compCANCELLED_QTY  
      , C.CANCELLED_TOTAL compCANCELLED_TOTAL  
      , C.PRODUCT_CNT compPRODUCT_CNT  
      , C.DAY_CNT compDAY_CNT  
      , CASE WHEN C.SALE_QTY > 0 THEN ROUND(C.PRODUCT_CNT * 1.0 / C.SALE_QTY, 2) ELSE 0 END compUPT  
      , @StartDate STARTDATE  
      , @EndDate ENDDATE  
      , @ComparingStartDate compSTARTDATE  
      , @ComparingEndDate compENDDATE  
   FROM #MAINSTORES ST   
   LEFT JOIN #MAINDATAALLSTORES M ON M.STOREID = ST.STOREID  
   LEFT JOIN #COMPARINGDATAALLSTORES C ON M.STOREID = C.STOREID  
  WHERE (ISNULL(M.SALE, 0) > 0 OR ISNULL(C.SALE, 0) > 0)  
END