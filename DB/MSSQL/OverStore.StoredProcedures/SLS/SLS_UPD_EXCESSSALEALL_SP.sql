CREATE PROCEDURE SLS_UPD_EXCESSSALEALL_SP AS
BEGIN

	DECLARE @startdate DATE = CAST(GETDATE() - 15 AS DATE)

	UPDATE SZ
	   SET TRANSACTION_DT =  CAST(CREATE_DT - 0.2 AS date) 
	  FROM SLS_SALEZET SZ (NOLOCK)
	 WHERE TRANSACTION_DT >= @startdate
	   AND DELETED_FL = 'N' 
	   AND DATEPART(HOUR, CREATE_DT) <= 3
	   AND SZ.TRANSACTION_DT != CAST(SZ.CREATE_DT - 0.2 AS date);

	WITH SILZ AS (
	SELECT *
	  FROM (
	SELECT SALEZETID, CREATE_DT, TRANSACTION_DT, STORE, CASHREGISTER, ZET_NO, RECEIPTTOTAL_AMT, 
		   COUNT(*) OVER (PARTITION BY TRANSACTION_DT, STORE, CASHREGISTER, ZET_NO) RC,
		   ROW_NUMBER() OVER (PARTITION BY TRANSACTION_DT, STORE, CASHREGISTER, ZET_NO ORDER BY CREATE_DT DESC) ROWNO
	  FROM SLS_SALEZET (NOLOCK)
	 WHERE TRANSACTION_DT >= @startdate
	   AND DELETED_FL = 'N') A
	 WHERE RC > 1 AND ROWNO != 1)
	UPDATE Z SET DELETED_FL = 'Y', UPDATE_DT = GETDATE() 
	-- SELECT Z.*
	  FROM SLS_SALEZET Z
	  JOIN SILZ S ON Z.SALEZETID = S.SALEZETID

	UPDATE SP          
	   SET TRANSACTION_DT = CAST(S.TRANSACTION_TM - 0.2 AS date)    
	  FROM SLS_SALEPAYMENT SP (NOLOCK)   
	  JOIN SLS_SALE S (NOLOCK) ON SP.SALE = S.SALEID    
	 WHERE S.TRANSACTION_DT >= @startdate
	   AND DATEPART(HOUR, S.TRANSACTION_TM) <= 3  
	   AND S.TRANSACTION_DT != CAST(S.TRANSACTION_TM - 0.2 AS date)
	        
	UPDATE SD      
	   SET TRANSACTION_DT = CAST(S.TRANSACTION_TM - 0.2 AS date)        
	  FROM SLS_SALEDETAIL SD (NOLOCK)   
	  JOIN SLS_SALE S (NOLOCK) ON SD.SALE = S.SALEID    
	 WHERE S.TRANSACTION_DT >= @startdate
	   AND DATEPART(HOUR, S.TRANSACTION_TM) <= 3  
	   AND S.TRANSACTION_DT != CAST(S.TRANSACTION_TM - 0.2 AS date)
	        
	UPDATE S          
	   SET TRANSACTION_DT = CAST(S.TRANSACTION_TM - 0.2 AS date)        
	  FROM SLS_SALE S (NOLOCK)   
	 WHERE S.TRANSACTION_DT >= @startdate
	   AND DATEPART(HOUR, S.TRANSACTION_TM) <= 3  
	   AND S.TRANSACTION_DT != CAST(S.TRANSACTION_TM - 0.2 AS date)

END