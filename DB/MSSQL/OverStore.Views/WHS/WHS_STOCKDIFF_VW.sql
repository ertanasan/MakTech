CREATE VIEW WHS_STOCKDIFF_VW AS
WITH COUNTINGDATES AS (
SELECT STOCKTAKINGSCHEDULEID, STORE, ACTUAL_DT
	 , LAG(ACTUAL_DT) OVER (PARTITION BY STORE ORDER BY ACTUAL_DT) LAGACTUAL_DT
	 , LAG(STOCKTAKINGSCHEDULEID) OVER (PARTITION BY STORE ORDER BY ACTUAL_DT) LAGSTOCKTAKINGSCHEDULEID
  FROM WHS_STOCKTAKINGSCHEDULE (NOLOCK)
 WHERE COUNTINGTYPE = 1
   AND DELETED_FL = 'N'
   AND STATUS = 2),
COUNTING AS (
SELECT CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, CD.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID) PRODUCT
	 , CD.ACTUAL_DT TRANSACTION_DT, CD.ACTUAL_DT COUNTING_DT, 0 QUANTITY_QTY, SUM(COUNTINGVALUE_AMT) COUNTING_QTY, 0 SALE_QTY, 0 SALE_AMT
  FROM WHS_STOCKTAKING ST (NOLOCK)
  JOIN PRD_PRODUCT P (NOLOCK) ON ST.PRODUCT = P.PRODUCTID
  LEFT JOIN PRD_PRODUCT PP (NOLOCK) ON P.PARENT = PP.PRODUCTID
  JOIN COUNTINGDATES CD ON ST.STOCKTAKINGSCHEDULE  = CD.STOCKTAKINGSCHEDULEID
 WHERE ST.DELETED_FL = 'N'
   AND CD.LAGACTUAL_DT IS NOT NULL
   AND P.SUPERGROUP1 != 9
 GROUP BY CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, CD.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID), CD.ACTUAL_DT),
LAGCOUNTING AS (
SELECT CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, CD.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID) PRODUCT
	 , CD.ACTUAL_DT TRANSACTION_DT, CD.ACTUAL_DT COUNTING_DT, SUM(COUNTINGVALUE_AMT) QUANTITY_QTY, 0 COUNTING_QTY, 0 SALE_QTY, 0 SALE_AMT
  FROM WHS_STOCKTAKING ST (NOLOCK)
  JOIN PRD_PRODUCT P (NOLOCK) ON ST.PRODUCT = P.PRODUCTID
  LEFT JOIN PRD_PRODUCT PP (NOLOCK) ON P.PARENT = PP.PRODUCTID
  JOIN COUNTINGDATES CD ON ST.STOCKTAKINGSCHEDULE  = CD.LAGSTOCKTAKINGSCHEDULEID
 WHERE ST.DELETED_FL = 'N'
   AND P.SUPERGROUP1 != 9
   AND LAGACTUAL_DT IS NOT NULL
 GROUP BY CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, CD.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID), CD.ACTUAL_DT),
STOCKTRAN AS (
SELECT CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, ST.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID) PRODUCT, ST.TRANSACTION_DT, ACTUAL_DT
	 , SUM(ST.QUANTITY_QTY) QUANTITY_QTY, 0 COUNTING_QTY, 0 SALE_QTY, 0 SALE_AMT
  FROM INV_STORETRANSACTIONS_VW ST    
  JOIN PRD_PRODUCT (NOLOCK) P ON ST.PRODUCT = P.PRODUCTID
  LEFT JOIN PRD_PRODUCT (NOLOCK) PP ON P.PARENT = PP.PRODUCTID
  JOIN COUNTINGDATES CD ON ST.STORE = CD.STORE AND ST.TRANSACTION_DT > LAGACTUAL_DT AND ST.TRANSACTION_DT <= CD.ACTUAL_DT
 WHERE LAGACTUAL_DT IS NOT NULL
   AND P.SUPERGROUP1 != 9
 GROUP BY CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, ST.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID), ST.TRANSACTION_DT, ACTUAL_DT),
SALES AS (
SELECT CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, S.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID) PRODUCT, S.TRANSACTION_DT, ACTUAL_DT, 0 QUANTITY_QTY, 0 COUNTING_QTY
	 , SUM(S.SALE_QTY-S.REFUND_QTY) SALE_QTY, SUM(S.SALE_AMT+S.REFUND_AMT) SALE_AMT
  FROM SLS_PRODUCTSUMMARY_SYN S (NOLOCK)
  JOIN PRD_PRODUCT P (NOLOCK) ON S.PRODUCT = P.PRODUCTID
  LEFT JOIN PRD_PRODUCT PP (NOLOCK) ON P.PARENT = PP.PRODUCTID
  JOIN COUNTINGDATES CD ON S.STORE = CD.STORE AND S.TRANSACTION_DT > LAGACTUAL_DT AND S.TRANSACTION_DT <= CD.ACTUAL_DT
 GROUP BY CD.STOCKTAKINGSCHEDULEID, CD.LAGSTOCKTAKINGSCHEDULEID, CD.LAGACTUAL_DT, S.STORE, COALESCE(PP.PRODUCTID, P.PRODUCTID), S.TRANSACTION_DT, ACTUAL_DT)
SELECT STOCKTAKINGSCHEDULEID, LAGSTOCKTAKINGSCHEDULEID, LAGACTUAL_DT, STORE, PRODUCT
	 , MIN(COUNTING_DT) COUNTING_DT, SUM(QUANTITY_QTY) STOCK, SUM(COUNTING_QTY) COUNTING_QTY
	 , SUM(SALE_QTY) SALE_QTY, SUM(SALE_AMT) SALE_AMT
  FROM ( SELECT * FROM  LAGCOUNTING UNION ALL SELECT * FROM STOCKTRAN UNION ALL SELECT * FROM COUNTING UNION ALL SELECT * FROM SALES ) A
 GROUP BY STOCKTAKINGSCHEDULEID, LAGSTOCKTAKINGSCHEDULEID, LAGACTUAL_DT, STORE, PRODUCT