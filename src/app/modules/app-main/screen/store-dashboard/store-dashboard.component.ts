import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { DatePipe } from '@angular/common';
// import { TooltipDirective } from '@progress/kendo-angular-tooltip';
import { TranslateService } from '@ngx-translate/core';
import { GrowlMessageService } from '@otservice/growl-message.service';
import { MainScreenBase } from '@otscreen-base/main-screen-base';
import { OTUtilityService } from '@otcommon/service/utility.service';
import { MenuItem } from '@otuicontrol/menu/menuitem';
import { SalesService } from '@sale/service/sales.service';
import { StockoutProductDetailComponent } from './stockout-product-detail/stockout-product-detail.component';
import { StockTakingService } from '@warehouse/service/stock-taking.service';
import { StockTransactionDialogComponent } from './stock-transaction-dialog/stock-transaction-dialog.component';
import { ProductStockDialogComponent } from './product-stock-dialog/product-stock-dialog.component';
import { StoreService } from '@store/service/store.service';

type bsColor = 'primary' | 'info'| 'warning' | 'danger';

@Component({
  selector: 'ot-store-dashboard',
  templateUrl: './store-dashboard.component.html',
  styleUrls: ['./store-dashboard.component.css']
})
export class StoreDashboardComponent extends MainScreenBase implements OnInit {
  @ViewChild(StockoutProductDetailComponent, {static: true}) stockoutProductDetailDialog: StockoutProductDetailComponent;
  @ViewChild(StockTransactionDialogComponent, {static: true}) stockTransactionDialog: StockTransactionDialogComponent;
  @ViewChild(ProductStockDialogComponent, {static: true}) productStockDialog: ProductStockDialogComponent;

  // INFO: General Parameters For This Component
  dashboardAuthorization: String = 'ST';  // (lower case) string type cause problem in template file for this variable
  chartColors;
  storeId: number;
  storeName: string;
  public isAnyStockTaking = false;
  public msgNoStockTaking = '';

  // INFO: Chart/Grid data sets & parameters for the storeDashboard
  storeSaleSummaryData: any = { 'CM_MAXSALE': 0, 'CM_AVGSALE': 0, 'CM_MAXCUSTOMER': 0, 'CM_AVGCUSTOMER': 0, 'TODAYSALE': 0, 'TODAYCUSTOMER' : 0, 'STOCKPRICE': 0 };
  salesByCategories: any[];
  salesByProducts: any[];
  productStockList: any[];
  dailyStockoutList: any[];
  stocksAtCriticalLevel: any[];
  stocksAtCriticalLevelCount = 0;
  stocksAtCriticalLevelDays = 30;
  dailyStockTrendByStore: any[];
  dailyStockTrendDays = 30;
  dailySaleTrend: any[];
  saleTrendStartDate: Date;
  saleTrendEndDate: Date;
  packagePlotBands: any[];

  // INFO: Loading paramaters for charts
  productStockLoading = false;
  dailyStockoutLoading = false;
  dailyStockTrendByStoreLoading = false;
  dailySaleTrendLoading = false;

  // INFO: Axis paramaters for charts
  public xAxisOfStockScatterChart = 'AVGDAILYTOTAL';
  xAxisOfCategorySalesBarChart: any;
  parametersOfProductSalesPieChart = {'valueField': 'CM_SALE_PCT', 'type': 'percent', 'title': 'initial'};

  // INFO: Data sets generated by chart onClick events
  categoryProductSales: any;
  stockTransactionList: any;
  productDetailStockoutList: any;

  constructor(
      messageService: GrowlMessageService,
      translateService: TranslateService,
      public router: ActivatedRoute,
      public utility: OTUtilityService,
      public datePipe: DatePipe,
      public saleService: SalesService,
      public stockTakingService: StockTakingService,
      public storeService: StoreService
  ) {
      super(messageService, translateService);
      this.chartColors = this.utility.colors.map(c => c.hex);
      this.saleTrendEndDate = new Date();
      this.saleTrendStartDate = new Date();
      this.saleTrendStartDate.setDate(this.saleTrendEndDate.getDate() - 90);
  }

  getBreadcrumbItems(): MenuItem[] {
    return null;
  }

  createEmptyItem() {
      throw new Error('Method not suported.');
  }

  refreshData() {
    this.saleService.getStoreDashboardSaleInfo(this.storeId).subscribe(
      result => {
        this.storeSaleSummaryData = result.Data[0];
        // console.log('storeSaleSummary', this.storeSaleSummaryData);
        if (this.storeSaleSummaryData.STOCKPRICE > 0) {
          this.isAnyStockTaking = true;
          this.refreshStockInfo();
          this.refreshDailyStockTrend();
          this.refreshDailyStockOut();
          this.refreshStocksAtCriticalLevel();
        } else {
          this.msgNoStockTaking = this.translateService.instant('No stock taking data available');
        }
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );
    this.refreshDailySaleTrend();
    this.refreshStoreCategorySaleData();
  }

  refreshDailySaleTrend() {
    if (this.dailySaleTrendLoading) {
      return;
    }
    this.dailySaleTrendLoading = true;
    this.saleService.getDailySaleTrend(this.storeId, this.datePipe.transform(this.saleTrendStartDate, 'yyyy-MM-dd'), this.datePipe.transform(this.saleTrendEndDate, 'yyyy-MM-dd')).subscribe(
      result => {
        this.dailySaleTrend = result.Data;
        this.dailySaleTrendLoading = false;
        // console.log('dailyStockTrendByStore: ', this.dailyStockTrendByStore);
        this.updatePackagePlotBands();
      }, error => {
        this.messageService.error(this.translateService.instant('Unexpected error') + `: ${error}`);
        this.dailySaleTrendLoading = false;
      }
    );
  }

  updatePackagePlotBands() {
    const packageDateIndexes = this.dailySaleTrend.reduce( this.findStartEndIndexes, { 'generalPackage': [], 'privatePackage': [] });
    this.packagePlotBands = [];

    if (packageDateIndexes.generalPackage.length !== 0) {
      packageDateIndexes.generalPackage.forEach(p => {
        this.packagePlotBands.push({
          from: p.startDateIndex,
          to: p.endDateIndex,
          color: '#ffe4b2',
          opacity: 0.5
        });
      });
    }

    if (packageDateIndexes.privatePackage.length !== 0) {
      packageDateIndexes.privatePackage.forEach(p => {
        this.packagePlotBands.push({
          from: p.startDateIndex,
          to: p.endDateIndex,
          color: '#c1e1ec',
          opacity: 0.5
        });
      });
    }
  }

  findStartEndIndexes(prev: { 'generalPackage': any[], 'privatePackage': any[] }, next: any, index: number) {
    const tmpObj = {'startDateIndex': 0, 'endDateIndex': 0};
    const gLen = prev.generalPackage.length;
    const pLen = prev.privatePackage.length;
    if ( next.GENERALPACKAGE_CNT !== 0) {
      if ( gLen === 0 || prev.generalPackage[gLen - 1].endDateIndex !== index - 1) {
        tmpObj.startDateIndex = index;
        tmpObj.endDateIndex = index;
        prev.generalPackage.push(tmpObj);
      } else {
        prev.generalPackage[gLen - 1].endDateIndex = index;
      }
    }

    if ( next.PRIVATEPACKAGE_CNT !== 0) {
      if ( pLen === 0 || prev.privatePackage[pLen - 1].endDateIndex !== index - 1) {
        tmpObj.startDateIndex = index;
        tmpObj.endDateIndex = index;
        prev.privatePackage.push(tmpObj);
      } else {
        prev.privatePackage[pLen - 1].endDateIndex = index;
      }
    }
    return prev;
  }

  refreshStockInfo() {
    if (this.productStockLoading) {
      return;
    }
    this.productStockLoading = true;
    this.saleService.getStoreDashboardStockInfo(this.storeId).subscribe(
      result => {
        this.productStockList = result.Data;
        this.productStockList.forEach(row => {
          row.STOCKPRICE = row.STOCK * row.PRICE;
        });
        // console.log('productList', this.productStockList);
        this.productStockLoading = false;
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
        this.productStockLoading = false;
      }
    );
  }

  refreshDailyStockTrend() {
    if (this.dailyStockTrendByStoreLoading) {
      return;
    }
    this.dailyStockTrendByStoreLoading = true;

    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(endDate.getDate() - this.dailyStockTrendDays);
    this.stockTakingService.listDailyStockTrendByStore(this.storeId, this.datePipe.transform(startDate, 'yyyy-MM-dd'), this.datePipe.transform(endDate, 'yyyy-MM-dd')).subscribe(
      result => {
        this.dailyStockTrendByStore = result.Data;
        this.dailyStockTrendByStoreLoading = false;
        // console.log('dailyStockTrendByStore: ', this.dailyStockTrendByStore);
      }, error => {
        this.messageService.error(this.translateService.instant('Unexpected error') + `: ${error}`);
        this.dailyStockTrendByStoreLoading = false;
      }
    );
  }

  refreshDailyStockOut() {
    if (this.dailyStockoutLoading) {
      return;
    }
    this.dailyStockoutLoading = true;
    this.saleService.getStoreDashboardDailyStockOut(this.storeId, this.stocksAtCriticalLevelDays).subscribe(
      result => {
        this.dailyStockoutList = result.Data;
        // this.dailyStockoutList = [{ 'TRANSACTION_DT': '2019-03-01', 'STOCKOUT': 3000 },
        //                        { 'TRANSACTION_DT': '2019-03-02', 'STOCKOUT': 3211 },
        //                        { 'TRANSACTION_DT': '2019-03-03', 'STOCKOUT': 3020 },
        //                        { 'TRANSACTION_DT': '2019-03-04', 'STOCKOUT': 3800 },
        //                        { 'TRANSACTION_DT': '2019-03-05', 'STOCKOUT': 2300 },
        //                        { 'TRANSACTION_DT': '2019-03-06', 'STOCKOUT': 3000 },
        //                        { 'TRANSACTION_DT': '2019-03-07', 'STOCKOUT': 3000 },
        //                        { 'TRANSACTION_DT': '2019-03-08', 'STOCKOUT': 4000 },
        //                        { 'TRANSACTION_DT': '2019-03-09', 'STOCKOUT': 3000 }];
        // console.log('dailyStockout', this.dailyStockoutList);
        this.dailyStockoutLoading = false;
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
        this.dailyStockoutLoading = false;
      }
    );
  }

  refreshStocksAtCriticalLevel() {
    this.stockTakingService.listStocksAtCriticalLevel(this.storeId).subscribe(
      result => {
        this.stocksAtCriticalLevel = result.Data;
        this.stocksAtCriticalLevelCount = result.Total;
        // this.stocksAtCriticalLevel = [{ 'STORE': '3', 'STORE_NM': 'aa', 'PRODUCT': 222, 'STOCKGROUP_NM': 'sg1', 'STOCK': 3.3, 'AVGDAILYSALE': 33, 'MAXDAILYSALE': 44, 'CRITICALLEVEL': 0 },
        //                               { 'STORE': '23', 'STORE_NM': 'bb', 'PRODUCT': 333, 'STOCKGROUP_NM': 'sg2', 'STOCK': 3.2, 'AVGDAILYSALE': 11, 'MAXDAILYSALE': 11, 'CRITICALLEVEL': 1 }];
        // console.log('stocksAtCriticalLevel', this.stocksAtCriticalLevel);
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );
  }

  refreshStoreCategorySaleData() {
    this.onCategorySaleBarAxisSwitched('Percent');
    this.saleService.getStoreCategorySale(this.storeId).subscribe(
      result => {
        this.salesByCategories = result.Data;
        // console.log('salesByCategories', this.salesByCategories);
        this.refreshStoreCategoryProductSaleData(this.salesByCategories[0].CATEGORY);
        if (this.parametersOfProductSalesPieChart.title === 'initial') {
          this.parametersOfProductSalesPieChart.title = this.salesByCategories[0].CATEGORY_NM + ' - ' + this.translateService.instant('Current Month');
        }
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );

  //   this.salesByCategories = [{'CATEGORY_NM': 'Baharat',    'CM_SALE_PCT': 0.030721,  'LM_SALE_PCT': 0.031393,  'LY_SALE_PCT': 0.033476
                               //         , 'CATEGORY': 1,     'CM_SALE': 8899.76,       'LM_SALE': 17458.60,      'LY_SALE': 10692.48},
                               // {'CATEGORY_NM': 'Aksas',     'CM_SALE_PCT': 0.090989,  'LM_SALE_PCT': 0.090517,  'LY_SALE_PCT': 0.089178
                               //         , 'CATEGORY': 2,     'CM_SALE': 26358.66,       'LM_SALE': 50338.98,      'LY_SALE': 28484.05},
                               // {'CATEGORY_NM': 'Asker',     'CM_SALE_PCT': 0.023434,  'LM_SALE_PCT': 0.022174,  'LY_SALE_PCT': 0.023574
                                //         , 'CATEGORY': 3,    'CM_SALE': 6788.62,       'LM_SALE': 12331.62,      'LY_SALE': 7529.97},
                               // {'CATEGORY_NM': 'Diğer',     'CM_SALE_PCT': 0.33434,   'LM_SALE_PCT': 0.222174,  'LY_SALE_PCT': 0.023574
                                //         , 'CATEGORY': -1,   'CM_SALE': 12690.24,       'LM_SALE': 24884.67,      'LY_SALE': 17404.95}];
  }

  refreshStoreCategoryProductSaleData(categoryId: number) {
    this.saleService.getStoreCategoryProductSale(this.storeId, categoryId).subscribe(
      result => {
        const prdCnt = 9;
        if (result.Total > prdCnt) {
          this.salesByProducts =  JSON.parse(JSON.stringify(result.Data.slice(0, prdCnt)));
          this.salesByProducts.push({'PRODUCT_NM': 'Diğer Ürünler'
                                    , 'CM_SALE_PCT': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.CM_SALE_PCT; }, 0 )
                                    , 'LM_SALE_PCT': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.LM_SALE_PCT; }, 0 )
                                    , 'LY_SALE_PCT': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.LY_SALE_PCT; }, 0 )
                                    , 'PRODUCTCODE_NM': null
                                    , 'CM_SALE': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.CM_SALE; }, 0 )
                                    , 'LM_SALE': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.LM_SALE; }, 0 )
                                    , 'LY_SALE': result.Data.slice(prdCnt, -1).reduce( function(total, currentProduct) { return total + currentProduct.LY_SALE; }, 0 )
                                  });
        } else {
          this.salesByProducts = result.Data;
        }
        // console.log('salesByProducts', this.salesByProducts);
        // console.log('salesByProductsRESULTDATA', result.Data);
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );
    // this.salesByProducts = [{'PRODUCT_NM': 'ÜrünA',   'CM_SALE_PCT': 0.030721,  'LM_SALE_PCT': 0.031393,  'LY_SALE_PCT': 0.033476
    //                           , 'PRODUCTCODE_NM': 1,    'CM_SALE': 8899.76,       'LM_SALE': 17458.60,      'LY_SALE': 10692.48},
    //                         {'PRODUCT_NM': 'ÜrünB',     'CM_SALE_PCT': 0.090989,  'LM_SALE_PCT': 0.090517,  'LY_SALE_PCT': 0.089178
    //                           , 'PRODUCTCODE_NM': 2,    'CM_SALE': 26358.66,      'LM_SALE': 50338.98,      'LY_SALE': 28484.05},
    //                         {'PRODUCT_NM': 'CCC',     'CM_SALE_PCT': 0.023434,  'LM_SALE_PCT': 0.022174,  'LY_SALE_PCT': 0.023574
    //                           , 'PRODUCTCODE_NM': 3,    'CM_SALE': 6788.62,       'LM_SALE': 12331.62,      'LY_SALE': 7529.97},
    //                         {'PRODUCT_NM': 'DO',     'CM_SALE_PCT': 0.33434,   'LM_SALE_PCT': 0.222174,  'LY_SALE_PCT': 0.023574
    //                           , 'PRODUCTCODE_NM': -1,   'CM_SALE': 12690.24,      'LM_SALE': 24884.67,      'LY_SALE': 17404.95}];
  }

  ngOnInit() {
    this.storeId = this.router.snapshot.params['storeId'];
    this.storeService.read(this.storeId).subscribe( store => this.storeName = store.Name);

    // MAGAZA YETKILISI VS GM/BOLGE YETKILISI
    this.storeService.listUserStores().subscribe(list => {
      // console.log(list[0].UserBranchType);
      if (list[0].UserBranchType === 'Central Office') {
        this.dashboardAuthorization = 'HQ';
      } else if (list[0].UserBranchType === 'Region') {
        this.dashboardAuthorization = 'RG';
      } else {
        this.dashboardAuthorization = 'ST';
      }
    });

    this.refreshData();
  }

  onShowProductStockListDialog() {
    if (this.productStockList) {
      this.productStockDialog.onShow.next(this.productStockList);
      this.productStockDialog.dialog.show();
    } else {
      this.messageService.warning(this.translateService.instant('No data retrieved for product stock'));
    }
  }

  onStockBubbleClick(event) {
    // console.log('stockTransactionEVENT', event);
    this.stockTakingService.listStockTransactions(this.storeId.toString(), event.dataItem.PRODUCT.toString(), event.dataItem.STOCK.toString()).subscribe(
      result => {
        this.stockTransactionList = result.Data;
        this.stockTransactionDialog.dialog.caption = `${event.dataItem.STOCKGROUP_NM.toString()} - ` + this.translateService.instant('Stock Transactions');
        this.stockTransactionDialog.onShow.next(this.stockTransactionList);
        this.stockTransactionDialog.dialog.show();
        // console.log('stockTransactions', this.stockTransactionList);
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );

    // this.stockTransactionList = [{'STOREID' : 0,
    // 'STORE_NM': 'string',
    // 'CATEGORY_NM': 'asd',
    // 'PRODUCT_NM': 'sda',
    // 'TRANSACTION_DT': '2019-03-01',
    // 'TRANSACTIONTYPE_NM': 'string',
    // 'QUANTITY_QTY': 3,
    // 'STOCK': 3.0}];
    // this.stockTransactionDialog.dialog.caption = `${event.dataItem.STOCKGROUP_NM.toString()} - Stok Hareketleri`;
    // this.stockTransactionDialog.onShow.next(this.stockTransactionList);
    // this.stockTransactionDialog.dialog.show();
  }

  onDailyStockAreaClick(event) {
    // console.log('productDetailStockoutEvent', event);
    this.saleService.getStoreDashboardDayStockOut(this.storeId, this.stocksAtCriticalLevelDays, this.datePipe.transform(new Date(event.category), 'yyyy-MM-dd')).subscribe(
      result => {
        this.productDetailStockoutList = result.Data;
        this.stockoutProductDetailDialog.dialog.caption = `${this.datePipe.transform(new Date(event.dataItem.TRANSACTION_DT), 'dd.MM.yyyy')} - ` + this.translateService.instant('StockOut Status');
        this.stockoutProductDetailDialog.onShow.next( {'list': this.productDetailStockoutList, 'auth': this.dashboardAuthorization} );
        this.stockoutProductDetailDialog.dialog.show();
        // console.log('productDetailStockout', this.productDetailStockoutList);
      }, error => {
        this.messageService.error(`Unexpected error: ${error}`);
      }
    );
    // this.productDetailStockoutList = [{'PRODUCTID' : 0, 'PRODUCT_NM': 'string', 'DAYSTOCK': 123, 'SALE': 1, 'AVGSALE': 13333, 'STOCKOUT': 3.3}];
    // this.stockoutProductDetailDialog.dialog.caption = `${this.datePipe.transform(new Date(event.dataItem.TRANSACTION_DT), 'yyyy-MM-dd')} - Stok Hareketleri`;
    // this.stockoutProductDetailDialog.onShow.next(this.productDetailStockoutList);
    // this.stockoutProductDetailDialog.dialog.show();
  }

  onCategorySaleBarAxisSwitched(xAxisType: string) {
    if (xAxisType === 'Sale') {
      this.xAxisOfCategorySalesBarChart = [{'dbName' : 'CM_SALE',     'viewName': 'Current Month',        'type' : 'currency' },
                                           {'dbName' : 'LM_SALE',     'viewName': 'Last Month',           'type' : 'currency' },
                                           {'dbName' : 'LY_SALE',     'viewName': 'Last Year This Month', 'type' : 'currency' }];
    } else {
      this.xAxisOfCategorySalesBarChart = [{'dbName' : 'CM_SALE_PCT', 'viewName': 'Current Month',        'type' : 'percent'  },
                                           {'dbName' : 'LM_SALE_PCT', 'viewName': 'Last Month',           'type' : 'percent'  },
                                           {'dbName' : 'LY_SALE_PCT', 'viewName': 'Last Year This Month', 'type' : 'percent'  }];
    }
  }

  onCategorySalesBarClicked(event) {
    // console.log('categorySaleEVENT', event);
    this.parametersOfProductSalesPieChart.valueField = Object.keys(event.dataItem)[0];
    this.parametersOfProductSalesPieChart.type = this.xAxisOfCategorySalesBarChart[0].type;
    this.parametersOfProductSalesPieChart.title = event.category + ' - ' + this.translateService.instant(this.xAxisOfCategorySalesBarChart[0].viewName);
    this.refreshStoreCategoryProductSaleData(event.dataItem.CATEGORY.toString());
  }

  onProductPieClick(event) {
    // console.log('productPieEVENT', event);
  }
}
