CREATE PROCEDURE [dbo].[WHS_INS_PARTIALCOUNT_SP] AS  
BEGIN  

  EXEC WHS_UPD_DRILLCOUNTERRORS_SP

  IF OBJECT_ID('tempdb.dbo.#SALES', 'U') IS NOT NULL  DROP TABLE #SALES  
  IF OBJECT_ID('tempdb.dbo.#CANCELS', 'U') IS NOT NULL  DROP TABLE #CANCELS  
  IF OBJECT_ID('tempdb.dbo.#RESULTS', 'U') IS NOT NULL  DROP TABLE #RESULTS  
  IF OBJECT_ID('tempdb.dbo.#RAND', 'U') IS NOT NULL  DROP TABLE #RAND  
  IF OBJECT_ID('tempdb.dbo.#PRODUCTS', 'U') IS NOT NULL  DROP TABLE #PRODUCTS
  
  SELECT *, CUMSUMTOTAL * 100.0/STORETOTAL PCT  
    INTO #SALES  
    FROM (  
  SELECT *  
	   , ROW_NUMBER() OVER (PARTITION BY STORE ORDER BY TOTAL DESC) ROWNO  
	   , SUM(TOTAL) OVER (PARTITION BY STORE ORDER BY TOTAL DESC ROWS UNBOUNDED PRECEDING) CUMSUMTOTAL  
	   , SUM(TOTAL) OVER (PARTITION BY STORE) STORETOTAL   
    FROM (  
  SELECT STORE, S.PRODUCT, SUM(PRICE) TOTAL  
    FROM SLS_STOREDAILYPRODUCT_SYN S 
   WHERE TRANSACTION_DT >= GETDATE() - 15  
     AND S.PRODUCT NOT IN (SELECT PRODUCT FROM PRD_PROPERTY WHERE PROPERTYTYPE = 6 AND VALUE_TXT = '1') -- KONSİNYE ÜRÜN
   GROUP BY STORE, S.PRODUCT) A) B  
   WHERE STORETOTAL != 0
   ORDER BY STORE, TOTAL DESC
  
  SELECT *, CUMCANCELTOTAL*100.0/STORECANCELTOTAL CANCELPCT  
    INTO #CANCELS  
    FROM (  
  SELECT *, SUM(CANCELTOTAL) OVER (PARTITION BY STORE ORDER BY CANCELTOTAL DESC ROWS UNBOUNDED PRECEDING) CUMCANCELTOTAL  
	   , SUM(CANCELTOTAL) OVER (PARTITION BY STORE) STORECANCELTOTAL  
	   , ROW_NUMBER() OVER (PARTITION BY STORE ORDER BY CANCELTOTAL DESC) CANCELROWNO  
    FROM (  
  SELECT STORE, S.PRODUCT, SUM(PRICE) CANCELTOTAL  
    FROM SLS_CANCELLEDPRODUCTS_SYN S 
   WHERE TRANSACTION_DT >= GETDATE() - 15  
     AND OMITREASON = 0  
     AND S.PRODUCT NOT IN (SELECT PRODUCT FROM PRD_PROPERTY WHERE PROPERTYTYPE = 6 AND VALUE_TXT = '1') -- KONSİNYE ÜRÜN
   GROUP BY STORE, S.PRODUCT) A ) B  
   ORDER BY STORE, CANCELTOTAL DESC  
  
  SELECT *, ISNULL(LAG(LASTNUM) OVER (PARTITION BY STORE ORDER BY TOTAL DESC),0)+1 STARTNUM, SUM(COEFF) OVER (PARTITION BY STORE) MAXNUM  
    INTO #RESULTS  
    FROM (  
  SELECT *, SUM(COEFF) OVER (PARTITION BY STORE ORDER BY TOTAL DESC ROWS UNBOUNDED PRECEDING) LASTNUM  
    FROM (  
  SELECT S.*, ST.STORE_NM, P.NAME_NM PRODUCT_NM, PP.PRICE_AMT, C.CANCELPCT  
       , CASE WHEN PCT < 20 THEN 3 WHEN PCT < 50 THEN 2 ELSE 1 END +   
         CASE WHEN PRICE_AMT > 60 THEN 5 WHEN PRICE_AMT > 50 THEN 4 WHEN PRICE_AMT > 40 THEN 3 WHEN PRICE_AMT > 30 THEN 2 ELSE 1 END +  
         CASE WHEN ISNULL(CANCELPCT, 100) < 30 THEN 3 WHEN ISNULL(CANCELPCT, 100) < 70 THEN 2 WHEN ISNULL(CANCELPCT, 100) < 100 THEN 1 ELSE 0 END COEFF   
    FROM #SALES S  
    JOIN PRD_PRODUCT P ON S.PRODUCT = P.PRODUCTID  
    JOIN STR_STORE ST ON S.STORE = ST.STOREID  
    JOIN PRC_SALEPRICE_VW PP ON S.PRODUCT = PP.PRODUCT  
    LEFT JOIN #CANCELS C ON S.STORE = C.STORE AND S.PRODUCT = C.PRODUCT   
   WHERE PCT < 85) A ) B  
   ORDER BY STORE, TOTAL DESC  
   
  SELECT *  
    INTO #RAND  
    FROM (  
  SELECT 1 ORDER_NO, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE  
   UNION ALL  
  SELECT 2, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE  
   UNION ALL  
  SELECT 3, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE  
   UNION ALL  
  SELECT 4, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE
   UNION ALL  
  SELECT 5, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE
   UNION ALL  
  SELECT 6, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE
   UNION ALL  
  SELECT 7, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE
   UNION ALL   
  SELECT 8, STORE, FLOOR(RAND(CHECKSUM(NEWID()))*MAX(MAXNUM-1))+1 RAND1 FROM #RESULTS GROUP BY STORE) A

  DELETE R
    FROM #RESULTS R
	JOIN (
  SELECT R.STORE, R.PRODUCT, COALESCE(SG.STOCKGROUP_NM, R.PRODUCT_NM) STOCKGROUP_NM,  COUNT(*) OVER (PARTITION BY R.STORE, COALESCE(SG.STOCKGROUP_NM, R.PRODUCT_NM)) GROUP_CNT
	   , ROW_NUMBER()  OVER (PARTITION BY R.STORE, COALESCE(SG.STOCKGROUP_NM, R.PRODUCT_NM) ORDER BY PRODUCT) ROWNO
    FROM #RAND ND  
    JOIN #RESULTS R ON ND.STORE = R.STORE AND ND.RAND1 BETWEEN R.STARTNUM AND R.LASTNUM  
	LEFT JOIN PRD_STOCKGROUP_VW SG ON R.PRODUCT = SG.PRODUCTID) A ON R.STORE = A.STORE AND R.PRODUCT = A.PRODUCT
   WHERE A.GROUP_CNT > 1 AND A.ROWNO > 1

  SELECT STOREID, STORE_NM, ISNULL(SG2.PRODUCTID, A.PRODUCT) PRODUCT, COEFF, ISNULL(SG2.PRODUCT_NM, NAME_NM) PRODUCT_NM, A.STOCKGROUP_NM, PRODUCT_CNT, CUMPRODUCT_CNT
    INTO #PRODUCTS
    FROM (
  SELECT ST.STOREID, ST.STORE_NM, R.PRODUCT, R.COEFF, P.NAME_NM, SG.STOCKGROUP_NM, ISNULL(SGG.ADET, 1) PRODUCT_CNT
	   , SUM(ISNULL(SGG.ADET, 1)) OVER (PARTITION BY ST.STOREID ORDER BY R.COEFF DESC ROWS UNBOUNDED PRECEDING) CUMPRODUCT_CNT
	FROM #RAND ND  
    JOIN #RESULTS R ON ND.STORE = R.STORE AND ND.RAND1 BETWEEN R.STARTNUM AND R.LASTNUM  
	JOIN PRD_PRODUCT P ON R.PRODUCT = P.PRODUCTID
	JOIN STR_STORE ST ON R.STORE = ST.STOREID
	LEFT JOIN PRD_STOCKGROUP_VW SG ON P.PRODUCTID = SG.PRODUCTID
	LEFT JOIN (SELECT STOCKGROUP, COUNT(*) ADET FROM PRD_STOCKGROUP_VW WHERE PRODUCT_NM != STOCKGROUP_NM GROUP BY STOCKGROUP) SGG ON SG.STOCKGROUP = SGG.STOCKGROUP) A
    LEFT JOIN PRD_STOCKGROUP_VW SG2 ON A.STOCKGROUP_NM = SG2.STOCKGROUP_NM AND SG2.STOCKGROUP != 26 -- Lokum Çeşitleri
   WHERE (CUMPRODUCT_CNT - PRODUCT_CNT) < 4

  DECLARE @date DATE = CAST(GETDATE() AS DATE)  
  DECLARE @lastday DATE = CAST(GETDATE()-1 AS DATE)  
  -- SELECT @date, @lastday 
  UPDATE WHS_STOCKTAKINGSCHEDULE   
     SET STATUS = 2, ACTUAL_DT = @lastday   
   WHERE PLANNED_DT = @lastday
     AND STATUS = 1  
     AND COUNTINGTYPE = 2   
   
  INSERT INTO WHS_STOCKTAKINGSCHEDULE  
  (EVENT, ORGANIZATION, DELETED_FL, CREATE_DT, CREATEUSER, CREATECHANNEL, CREATEBRANCH, CREATESCREEN,  
   SCHEDULE_NM, STORE, COUNTINGTYPE, PLANNED_DT, STATUS)  
  SELECT 1, 1, 'N', GETDATE(), 1, 1, 1, 1, STORE_NM, STOREID, 2, @date, 1  
    FROM STR_STORE_VW
   -- WHERE STOREID IN (SELECT DISTINCT STORE FROM INV_CURRENTSTOCK)
   
   
  INSERT INTO WHS_STOCKTAKING  
  (EVENT, ORGANIZATION, DELETED_FL, CREATE_DT, CREATEUSER, CREATECHANNEL, CREATEBRANCH, CREATESCREEN,  
   STORE, COUNTING_DT, PRODUCT, COUNTINGVALUE_AMT, ZONE, STOCKTAKINGSCHEDULE)  
  SELECT DISTINCT 1, 1, 'N', GETDATE(), 1, 1, 1, 1, P.STOREID, @date, P.PRODUCT, 0, ZONEID, S.STOCKTAKINGSCHEDULEID     
	FROM #PRODUCTS P
    JOIN WHS_ZONE Z ON LOCATION_TXT = 'STORE'
    JOIN WHS_STOCKTAKINGSCHEDULE S ON P.STOREID = S.STORE AND S.PLANNED_DT = @date AND COUNTINGTYPE = 2 AND STATUS = 1  


  INSERT INTO WHS_STOCKTAKING  
  (EVENT, ORGANIZATION, DELETED_FL, CREATE_DT, CREATEUSER, CREATECHANNEL, CREATEBRANCH, CREATESCREEN,  
   STORE, COUNTING_DT, PRODUCT, COUNTINGVALUE_AMT, ZONE, STOCKTAKINGSCHEDULE)  
  SELECT DISTINCT 1, 1, 'N', GETDATE(), 1, 1, 1, 1, ST.STOREID, @date, DP.PRODUCT, 0, ZONEID, S.STOCKTAKINGSCHEDULEID
    FROM WHS_DRILLPRODUCT DP
	JOIN STR_STORE_VW ST ON (DP.STORE = -1 OR DP.STORE = ST.STOREID)
	JOIN WHS_STOCKTAKINGSCHEDULE S ON ST.STOREID = S.STORE AND S.PLANNED_DT = @date AND COUNTINGTYPE = 2 AND STATUS = 1
	JOIN WHS_ZONE Z ON LOCATION_TXT = 'STORE'
	LEFT JOIN WHS_STOCKTAKING STK ON STK.STOCKTAKINGSCHEDULE = S.STOCKTAKINGSCHEDULEID AND STK.PRODUCT = DP.PRODUCT AND STK.ZONE = Z.ZONEID
   WHERE DP.COUNTING_DT = @date
     AND STK.STOCKTAKINGID IS NULL
  
END