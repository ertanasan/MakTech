CREATE PROCEDURE SLS_UPD_STOCKOUT_SP AS
BEGIN

	IF OBJECT_ID('tempdb..#STOREDETAILS') IS NOT NULL DROP TABLE #STOREDETAILS

	DECLARE @STARTDATE DATE = CAST(GETDATE()-45 AS date);
	DECLARE @ENDDATE DATE = CAST(GETDATE() - 0.75 AS DATE);

	WITH PRODUCTS AS (
	SELECT S.TRANSACTION_DT TRANSACTIONDATE, C.CATEGORY_NM CATEGORY, CODE_NM PRODUCTCODE, NAME_NM PRODUCTNAME, PRODUCTID
		 , SUM(QUANTITY) DAILY_AVG  
		 , COUNT(*) STORE_CNT
		 , SUM(QUANTITY)/COUNT(*) DAILYSTORE_AVG  
	  FROM SLS_STOREDAILYPRODUCT_SYN S
	  JOIN SYS_DATE D (NOLOCK) ON S.TRANSACTION_DT = D.DATE_DT
	  JOIN PRD_PRODUCT P ON S.PRODUCT = P.PRODUCTID
	  LEFT JOIN PRD_SUBGROUP SG ON P.SUBGROUP = SG.SUBGROUPID
	  LEFT JOIN PRD_CATEGORY C ON SG.CATEGORY = C.CATEGORYID
	 WHERE D.DATE_DT BETWEEN @STARTDATE AND @ENDDATE 
	 GROUP BY S.TRANSACTION_DT, C.CATEGORY_NM, CODE_NM, NAME_NM, PRODUCTID
	),
	STORES AS (
	SELECT S.TRANSACTION_DT TRANSACTIONDATE, STOREID, STORE_NM, SUM(QUANTITY) QUANTITY, COUNT(*) OVER (PARTITION BY S.TRANSACTION_DT) TOTALSTORE_CNT  
	  FROM SLS_STOREDAILYPRODUCT_SYN S
	  JOIN SYS_DATE D (NOLOCK) ON S.TRANSACTION_DT = D.DATE_DT
	  JOIN STR_STORE ST ON S.STORE = ST.STOREID
	 WHERE D.DATE_DT BETWEEN @STARTDATE AND @ENDDATE 
	 GROUP BY S.TRANSACTION_DT, STOREID, STORE_NM
	), 
	PRODUCTSTORES AS (
	SELECT S.TRANSACTION_DT, PRODUCTID, STOREID, STORE_NM, SUM(QUANTITY) QUANTITY  
	  FROM SLS_STOREDAILYPRODUCT_SYN S
	  JOIN SYS_DATE D (NOLOCK) ON S.TRANSACTION_DT = D.DATE_DT
	  JOIN STR_STORE ST ON S.STORE = ST.STOREID
	  JOIN PRD_PRODUCT P ON S.PRODUCT = P.PRODUCTID
	 WHERE D.DATE_DT BETWEEN @STARTDATE AND @ENDDATE 
	 GROUP BY S.TRANSACTION_DT, PRODUCTID, STOREID, STORE_NM
	HAVING SUM(QUANTITY) > 0)
	SELECT P.TRANSACTIONDATE, P.PRODUCTID, CATEGORY, PRODUCTCODE, PRODUCTNAME, S.STOREID, S.STORE_NM, DAILY_AVG, STORE_CNT, TOTALSTORE_CNT, DAILYSTORE_AVG
	  INTO #STOREDETAILS
	  FROM PRODUCTS P
	  JOIN STORES S ON P.TRANSACTIONDATE = S.TRANSACTIONDATE
	  LEFT JOIN PRODUCTSTORES PS ON P.TRANSACTIONDATE = PS.TRANSACTION_DT AND P.PRODUCTID = PS.PRODUCTID AND S.STOREID = PS.STOREID
	 WHERE PS.QUANTITY IS NULL 

	INSERT INTO SLS_STOCKOUT_SYN 
	SELECT A.*
	  FROM #STOREDETAILS A
	  LEFT JOIN SLS_STOCKOUT_SYN B ON A.TRANSACTIONDATE = B.TRANSACTIONDATE AND A.PRODUCTID = B.PRODUCTID AND A.STOREID = B.STOREID
	 WHERE B.STOREID IS NULL

	-- INSERT INTO SLS_STOCKOUT_SYN 
	DELETE B
	  FROM #STOREDETAILS A
	  RIGHT JOIN SLS_STOCKOUT_SYN B ON A.TRANSACTIONDATE = B.TRANSACTIONDATE AND A.PRODUCTID = B.PRODUCTID AND A.STOREID = B.STOREID
	 WHERE B.TRANSACTIONDATE BETWEEN @STARTDATE AND @ENDDATE
	   AND A.STOREID IS NULL

	UPDATE B
	   SET B.DAILY_AVG = A.DAILY_AVG
		 , B.DAILYSTORE_AVG = A.DAILYSTORE_AVG
		 , B.STORE_CNT = A.STORE_CNT
		 , B.TOTALSTORE_CNT = A.TOTALSTORE_CNT
	  FROM #STOREDETAILS A
	  JOIN SLS_STOCKOUT_SYN B ON A.TRANSACTIONDATE = B.TRANSACTIONDATE AND A.PRODUCTID = B.PRODUCTID AND A.STOREID = B.STOREID
	 WHERE A.STORE_CNT != B.STORE_CNT
		OR A.TOTALSTORE_CNT	 != B.TOTALSTORE_CNT
		OR A.DAILYSTORE_AVG != B.DAILYSTORE_AVG

END